<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>비행기 게임</title>
    <style>
        body {
            margin: 0;
            overflow: hidden;
            background: skyblue;
        }
        #gameCanvas {
            display: block;
            margin: 0 auto;
            background: lightgreen;
        }
    </style>
</head>
<body>
    <canvas id="gameCanvas" width="400" height="600"></canvas>
    <script>
        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');

        let plane = {
            x: canvas.width / 2 - 25,
            y: canvas.height - 60,
            width: 50,
            height: 50,
            speed: 5
        };

        let bullets = [];
        let enemies = [];
        let enemyInterval = 2000; // 2초마다 적 생성

        function drawPlane() {
            ctx.fillStyle = 'blue';
            ctx.fillRect(plane.x, plane.y, plane.width, plane.height);
        }

        function drawBullets() {
            ctx.fillStyle = 'red';
            bullets.forEach(bullet => {
                ctx.fillRect(bullet.x, bullet.y, bullet.width, bullet.height);
            });
        }

        function drawEnemies() {
            ctx.fillStyle = 'green';
            enemies.forEach(enemy => {
                ctx.fillRect(enemy.x, enemy.y, enemy.width, enemy.height);
            });
        }

        function update() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            drawPlane();
            drawBullets();
            drawEnemies();

            bullets.forEach((bullet, index) => {
                bullet.y -= bullet.speed;
                if (bullet.y < 0) bullets.splice(index, 1);
            });

            enemies.forEach((enemy, index) => {
                enemy.y += enemy.speed;
                if (enemy.y > canvas.height) enemies.splice(index, 1);
            });

            // 충돌 감지
            bullets.forEach((bullet, bulletIndex) => {
                enemies.forEach((enemy, enemyIndex) => {
                    if (bullet.x < enemy.x + enemy.width &&
                        bullet.x + bullet.width > enemy.x &&
                        bullet.y < enemy.y + enemy.height &&
                        bullet.y + bullet.height > enemy.y) {
                        bullets.splice(bulletIndex, 1);
                        enemies.splice(enemyIndex, 1);
                    }
                });
            });
        }

        function spawnEnemy() {
            const enemy = {
                x: Math.random() * (canvas.width - 50),
                y: 0,
                width: 50,
                height: 50,
                speed: 2
            };
            enemies.push(enemy);
        }

        document.addEventListener('keydown', (event) => {
            if (event.key === 'ArrowLeft' && plane.x > 0) {
                plane.x -= plane.speed;
            } else if (event.key === 'ArrowRight' && plane.x < canvas.width - plane.width) {
                plane.x += plane.speed;
            } else if (event.key === ' ') {
                bullets.push({ x: plane.x + plane.width / 2 - 2.5, y: plane.y, width: 5, height: 20, speed: 5 });
            }
        });

        setInterval(spawnEnemy, enemyInterval);
        function gameLoop() {
            update();
            requestAnimationFrame(gameLoop);
        }
        gameLoop();
    </script>
</body>
</html>
